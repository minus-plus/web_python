1. modify the handler, add .json to url:
	method '/blog/?(?:\.json)?',   '?:' tells GAE it is not a parameter in '()'
	'?' means match the last character 0 or 1 time

2. modify initialize() in Handler class:
	--initialize() will be called when we call the Handler (every time)
	set format = 'json' or 'html'
	add render_json(self, content):
		#content could be list or dictionary
3. add method to convert post to json
	

	
cache is dictionary
quiz 1:
import time

# complex_computation() simulates a slow function. time.sleep(n) causes the
# program to pause for n seconds. In real life, this might be a call to a
# database, or a request to another web service.
def complex_computation(a, b):
    time.sleep(.5)
    return a + b

# QUIZ - Improve the cached_computation() function below so that it caches
# results after computing them for the first time so future calls are faster
cache = {}
def cached_computation(a, b):
    if not (a, b) in cache.keys():
        cache[(a, b)] = complex_computation(a, b)
    return cache[(a, b)]
    ###Your code here.

start_time = time.time()
print cached_computation(5, 3)
print "the first computation took %f seconds" % (time.time() - start_time)

start_time2 = time.time()
print cached_computation(5, 3)
print "the second computation took %f seconds" % (time.time() - start_time2)

